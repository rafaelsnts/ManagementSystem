using DevExpress.XtraEditors;
using DevExpress.XtraGrid.Views.Grid;
using Microsoft.EntityFrameworkCore;
using DevExpress.XtraGrid.Views.Grid.ViewInfo;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraBars;
using ManagementSystem.Context;
using ManagementSystem.Models;
using DevExpress.Xpo;
using System.IO;

namespace ManagementSystem.Forms
{

	public partial class form_Exibir_Clientes : DevExpress.XtraEditors.XtraForm
	{
		private int rowHandle;
		private GridColumn column;
		private int linhaSelecionada;
		private UnitOfWork uow = new UnitOfWork();
		private XPServerCollectionSource XPOSource;
		ManagementSystemContext context = new ManagementSystemContext();
		form_Menu formMenu;
		public form_Exibir_Clientes(form_Menu _formMenu)
		{
			InitializeComponent();
			formMenu = _formMenu;
			btn_Excluir.ItemClick += Btn_Excluir_ItemClick;
			btn_Editar.ItemClick += Btn_Editar_ItemClick;
			CarregarGrid();
		}

		private void Btn_Editar_ItemClick(object sender, ItemClickEventArgs e)
		{
			form_Cadastro_Cliente alterarDadosCliente = new form_Cadastro_Cliente();
			alterarDadosCliente.btn_Alterar.Visible = true;
			alterarDadosCliente.btn_Salvar.Visible = false;
			alterarDadosCliente.dte_Data_Cadastro.Enabled = false;
			//alterarDadosCliente.btn_Voltar.Visible = grid_Cliente;

			tb_clientes clienteSelecionado = grid_Cliente.GetRow(linhaSelecionada) as tb_clientes;
			alterarDadosCliente.lbl_Id_Cliente.Text = clienteSelecionado.cli_id_cliente.ToString();
			alterarDadosCliente.dte_Data_Cadastro.EditValue = clienteSelecionado.cli_data_criacao == null ? null : clienteSelecionado.cli_data_criacao;
			alterarDadosCliente.txt_Nome_Cliente.Text = clienteSelecionado.cli_nome;
			alterarDadosCliente.txt_Cpf_Cliente.Text = clienteSelecionado.cli_cpf;
			alterarDadosCliente.txt_Email_Cliente.Text = clienteSelecionado.cli_email;
			alterarDadosCliente.txt_Telefone_Cliente.Text = clienteSelecionado.cli_telefone;
			alterarDadosCliente.txt_Cep_Cliente.Text = clienteSelecionado.cli_cep;
			alterarDadosCliente.txt_Rua_Cliente.Text = clienteSelecionado.cli_rua;
			alterarDadosCliente.txt_Cidade_Cliente.Text = clienteSelecionado.cli_cidade;
			alterarDadosCliente.txt_Numero_Cliente.Text = clienteSelecionado.cli_numero_casa;
			alterarDadosCliente.txt_Bairro_Cliente.Text = clienteSelecionado.cli_bairro;
			alterarDadosCliente.txt_Estado_Cliente.Text = clienteSelecionado.cli_estado;
			alterarDadosCliente.pic_Foto_Cliente.Image = BuscarImagem(clienteSelecionado.cli_foto_cliente);
			formMenu.showChildForminPanel(alterarDadosCliente);
			//alterarDadosCliente.ShowDialog();
		}
		private Image BuscarImagem(byte[] _fotoCliente)
		{
			if (_fotoCliente != null)
			{
				if (_fotoCliente[0] != 0)
				{
					using (MemoryStream ms = new MemoryStream(_fotoCliente))
					{
						return Image.FromStream(ms);
					}
				}
			}
			return null;
		}

		private void Btn_Excluir_ItemClick(object sender, ItemClickEventArgs e)
		{
			ExcluirCliente();
		}

		private void ExcluirCliente()
		{
			try
			{
				DialogResult usuarioEscolha = XtraMessageBox.Show("Deseja realmente excluir este cliente?", "AVISO", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1);
				if (usuarioEscolha == DialogResult.Yes)
				{
					tb_clientes cliente = (tb_clientes)grid_Cliente.GetRow(linhaSelecionada);
					var deletarCliente = context.tb_clientes.FirstOrDefault(x => x.cli_id_cliente == cliente.cli_id_cliente);
					context.tb_clientes.Remove(deletarCliente);
					context.SaveChangesAsync();
					CarregarGrid();
				}
					
			}
			catch (Exception ex)
			{
				XtraMessageBox.Show($"Ocorreu um erro ao excluir o cliente: {ex.Message}", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
			}
		}

		private void CarregarGrid()
		{
			// This line of code is generated by Data Source Configuration Wizard
			// Instantiate a new DBContext
			ManagementSystem.Context.ManagementSystemContext dbContext = new ManagementSystem.Context.ManagementSystemContext();
			// Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
			dbContext.tb_clientes.LoadAsync().ContinueWith(loadTask =>
			{
				// Bind data to control when loading complete
				gridControl1.DataSource = dbContext.tb_clientes.Local.ToBindingList();
			}, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
		}

		private void grid_Cliente_PopupMenuShowing(object sender, DevExpress.XtraGrid.Views.Grid.PopupMenuShowingEventArgs e)
		{
			GridView view = sender as GridView;
			GridHitInfo hitInfo = view.CalcHitInfo(e.Point);
			if (hitInfo.InRowCell)
			{
				view.FocusedRowHandle = rowHandle = hitInfo.RowHandle;
				column = hitInfo.Column;
				popupMenu1.ShowPopup(barManager1, view.GridControl.PointToScreen(e.Point));
			}
		}

		private void grid_Cliente_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
		{
			linhaSelecionada = e.FocusedRowHandle;
		}
	}
}